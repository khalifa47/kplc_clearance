datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum StatusNames {
  active
  inactive
  pending
  progress
  approved
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]

  @@map("roles")
}

model Status {
  id                  Int                   @id @default(autoincrement())
  name                StatusNames
  User                User[]
  Clearance           Clearance[]
  DepartmentClearance DepartmentClearance[]

  @@map("statuses")
}

model Department {
  id                  Int                   @id @default(autoincrement())
  name                String
  DepartmentClearance DepartmentClearance[]
  Item                Item[]

  @@map("departments")
}

model User {
  id                  String                @id @default(cuid())
  firstName           String                @map("first_name")
  lastName            String                @map("last_name")
  password            String
  roleId              Int                   @map("role_id")
  statusId            Int                   @map("status_id")
  role                Role                  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  status              Status                @relation(fields: [statusId], references: [id], onDelete: Cascade)
  // email         String?   @unique
  // emailVerified DateTime?
  // image         String?
  Clearance           Clearance[]
  DepartmentClearance DepartmentClearance[]
  AssignedItems       AssignedItems[]

  @@map("users")
}

model Clearance {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  statusId  Int      @map("status_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  status              Status                @relation(fields: [statusId], references: [id], onDelete: Cascade)
  DepartmentClearance DepartmentClearance[]

  @@map("clearances")
}

model DepartmentClearance {
  id           Int     @id @default(autoincrement())
  clearanceId  Int     @map("clearance_id")
  statusId     Int     @map("status_id")
  departmentId Int     @map("department_id")
  clearedBy    String? @map("cleared_by")

  clearance  Clearance  @relation(fields: [clearanceId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [clearedBy], references: [id], onDelete: Cascade)
  status     Status     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@map("department_clearances")
}

model Item {
  id            String          @id
  name          String
  departmentId  Int             @map("department_id")
  AssignedItems AssignedItems[]

  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@map("items")
}

model AssignedItems {
  id         Int       @id @default(autoincrement())
  itemId     String    @map("item_id")
  userId     String    @map("user_id")
  assignedOn DateTime
  returnedOn DateTime?

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assigned_items")
}
